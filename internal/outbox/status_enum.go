// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package outbox

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// READY is a OutboxStatus of type READY.
	READY OutboxStatus = "READY"
	// SENDING is a OutboxStatus of type SENDING.
	SENDING OutboxStatus = "SENDING"
	// SENT is a OutboxStatus of type SENT.
	SENT OutboxStatus = "SENT"
)

var ErrInvalidOutboxStatus = errors.New("not a valid OutboxStatus")

// String implements the Stringer interface.
func (x OutboxStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OutboxStatus) IsValid() bool {
	_, err := ParseOutboxStatus(string(x))
	return err == nil
}

var _OutboxStatusValue = map[string]OutboxStatus{
	"READY":   READY,
	"ready":   READY,
	"SENDING": SENDING,
	"sending": SENDING,
	"SENT":    SENT,
	"sent":    SENT,
}

// ParseOutboxStatus attempts to convert a string to a OutboxStatus.
func ParseOutboxStatus(name string) (OutboxStatus, error) {
	if x, ok := _OutboxStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OutboxStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return OutboxStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidOutboxStatus)
}

// MarshalText implements the text marshaller method.
func (x OutboxStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OutboxStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseOutboxStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
