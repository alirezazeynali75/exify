// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package payment

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// DEPOSIT is a PaymentType of type DEPOSIT.
	DEPOSIT PaymentType = "deposit"
	// WITHDRAWAL is a PaymentType of type WITHDRAWAL.
	WITHDRAWAL PaymentType = "withdrawal"
)

var ErrInvalidPaymentType = errors.New("not a valid PaymentType")

// String implements the Stringer interface.
func (x PaymentType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PaymentType) IsValid() bool {
	_, err := ParsePaymentType(string(x))
	return err == nil
}

var _PaymentTypeValue = map[string]PaymentType{
	"deposit":    DEPOSIT,
	"withdrawal": WITHDRAWAL,
}

// ParsePaymentType attempts to convert a string to a PaymentType.
func ParsePaymentType(name string) (PaymentType, error) {
	if x, ok := _PaymentTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PaymentTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return PaymentType(""), fmt.Errorf("%s is %w", name, ErrInvalidPaymentType)
}

// MarshalText implements the text marshaller method.
func (x PaymentType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PaymentType) UnmarshalText(text []byte) error {
	tmp, err := ParsePaymentType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
