// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package payment

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// PROCESSING is a PaymentStatus of type PROCESSING.
	PROCESSING PaymentStatus = "PROCESSING"
	// COMPLETED is a PaymentStatus of type COMPLETED.
	COMPLETED PaymentStatus = "COMPLETED"
	// FAILED is a PaymentStatus of type FAILED.
	FAILED PaymentStatus = "FAILED"
)

var ErrInvalidPaymentStatus = errors.New("not a valid PaymentStatus")

// String implements the Stringer interface.
func (x PaymentStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PaymentStatus) IsValid() bool {
	_, err := ParsePaymentStatus(string(x))
	return err == nil
}

var _PaymentStatusValue = map[string]PaymentStatus{
	"PROCESSING": PROCESSING,
	"processing": PROCESSING,
	"COMPLETED":  COMPLETED,
	"completed":  COMPLETED,
	"FAILED":     FAILED,
	"failed":     FAILED,
}

// ParsePaymentStatus attempts to convert a string to a PaymentStatus.
func ParsePaymentStatus(name string) (PaymentStatus, error) {
	if x, ok := _PaymentStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PaymentStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return PaymentStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidPaymentStatus)
}

// MarshalText implements the text marshaller method.
func (x PaymentStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PaymentStatus) UnmarshalText(text []byte) error {
	tmp, err := ParsePaymentStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
